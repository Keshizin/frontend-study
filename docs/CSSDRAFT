What is CSS?
- CSS stands for Cascading Style Sheets
- CSS describes how HTML elements are to be displayed on screen, paper, or in
  other media
- CSS saves a lot of work. It can control the layout of multiple web pages all
  at once
- External stylesheets are stored in CSS files

CSS is used to define styles for your web pages, including the design, layout
and variations in display for different devices and screen sizes.

HTML was NEVER intended to contain tags for formatting a web page! HTML was
created to describe the content of a web page. CSS removed the style formatting
from the HTML page!

The style definitions are normally saved in external .css files. With an
external stylesheet file, you can change the look of an entire website by
changing just one file!

-------------------------------------------------------------------------------
CSS Syntax

A CSS rule-set consists of a selector and a declaration block:

   SELECTOR DECLARATION (property:value;)

The selector points to the HTML element you want to style.

The declaration block contains one or more declarations separated by
semicolons.

Each declaration includes a CSS property name and a value, separated by a
colon.

A CSS declaration always ends with a semicolon, and declaration blocks are
surrounded by curly braces. 

A CSS comment starts with /* and ends with */. Comments can also span multiple
lines

Note: Do not add a space between the property value and the unit (such as
margin-left: 20 px;). The correct way is: margin-left: 20px;

-------------------------------------------------------------------------------
CSS Selectors

CSS selectors are used to "find" (or select) the HTML elements you want to
style.

We can divide CSS selectors into five categories:

   - Simple selectors
     select elements based on name, id, class
     Examples:
      - p{color:black;}
      - #myid {color:black;}
      - .myclass {color:black;}
      - p.myclass {color:black;}
      - <p class="myclass1 myclass2">
      - (universal) * {color:black;}
      - (grouping) p, h1, h2 {color:black;}

   - Combinator selectors
     select elements based on a specific relationship between them

   - Pseudo-class selectors
     select elements based on a certain state

   - Pseudo-elements selectors
     select and style a part of an element

   - Attribute selectors
   select elements based on an attribute or attribute value

-------------------------------------------------------------------------------
There are three ways of inserting a style sheet:

- External CSS
<link rel="stylesheet" href="css/css-test.css" type="text/css">

- Internal CSS
An internal style sheet may be used if one single HTML page has a unique style.
The internal style is defined inside the <style> element, inside the head
section.

<style>
body {background-color: linen;}
</style>

- Inline CSS
An inline style may be used to apply a unique style for a single element.
To use inline styles, add the style attribute to the relevant element. The
style attribute can contain any CSS property.

<h1 style="color:blue;text-align:center;">This is a heading</h1>

If some properties have been defined for the same selector (element) in
different style sheets, the value from the last read style sheet will be used.

------------------------------------------------------------------------------
In CSS, a color can be specified by using a color name. CSS/HTML support 140
standard color names.

-------------------------------------------------------------------------------

Nota:

The id attribute specifies a unique id for an HTML element (the value must be
unique within the HTML document).

The id value can be used by CSS and JavaScript to perform certain tasks for the
element with the specific id value.

The HTML class attribute is used to define equal styles for elements with the
same class name.

So, all HTML elements with the same class attribute will get the same style.

-------------------------------------------------------------------------------

Se você usar IDs, o CSS Lint irá acusar o seu CSS de quebrar a regra "Disallow
IDs in selectors" (Proibir ID's em seletores).

Não é à toa que o slogan do CSS Lint é "Will hurt your feelings" ("Irá ferir os
seus sentimentos").

De acordo com a documentação da regra:

Por anos, desenvolvedores têm tratado IDs como um modo de dizer "aquela coisa!"
Todavia, IDs têm um efeito colateral: eles devem ser únicos e não podem ser
reutilizados. Você poderia em potencial estilizar todos os elementos de sua
página utilizando seletores com ID, mas você perderia muito dos benefícios do
CSS no processo.

Um dos beneficios do CSS é a habilidade de reusar regras de estilo em múltiplos
lugares. Quando você começa a utilizar seletores com ID, você está
automaticamente limitando aquele estilo a um único elemento.

Eu mesmo utilizo IDs em seletores e apesar de compreender e concordar com o
argumento, pessoalmente não considero uma regra tão fundamental que não possa
ser ignorada em alguns casos.

A seção "Leitura Adicional" da documentação citada inclui dois artigos que
atacam com veemência o uso de IDs em seletores. Um dos artigos atraiu grande
quantidade dde comentários defendendo o uso de IDs em seletores:

 - Don't use IDs in CSS selectors?
 - Don't use ID selectors in CSS

Eu pessoalmente recomendo evitar o uso de IDs. Porém, diferente da turma que
estou citando, eu não acho que é uma "abominação terrivelmente monstruosa" a
sua utilização. Melhor evitar, mas se usar de vez em quando, tudo bem! :-) É
assim que eu penso. Tem coisas mais sérias com as quais se preocupar...

-------------------------------------------------------------------------------

Text Color

The color property is used to set the color of the text. The color is specified by:

a color name - like "red"
a HEX value - like "#ff0000"
an RGB value - like "rgb(255,0,0)"
Look at CSS Color Values for a complete list of possible color values.

The default text color for a page is defined in the body selector.

Note: For W3C compliant CSS: If you define the color property, you must also define the background-color.

Text Alignment
The text-align property is used to set the horizontal alignment of a text.

A text can be left or right aligned, centered, or justified.

The following example shows center aligned, and left and right aligned text (left alignment is default if text direction is left-to-right, and right alignment is default if text direction is right-to-left):

h1 {
  text-align: center;
}

h2 {
  text-align: left;
}

h3 {
  text-align: right;
}

div {
  text-align: justify;
}

When the text-align property is set to "justify", each line is stretched so that every line has equal width, and the left and right margins are straight (like in magazines and newspapers):

Text Decoration
The text-decoration property is used to set or remove decorations from text.

The value text-decoration: none; is often used to remove underlines from links:

a {
  text-decoration: none;
}

h1 {
  text-decoration: overline;
}

h2 {
  text-decoration: line-through;
}

h3 {
  text-decoration: underline;
}

Note: It is not recommended to underline text that is not a link, as this often confuses the reader.

Text Transformation
The text-transform property is used to specify uppercase and lowercase letters in a text.

It can be used to turn everything into uppercase or lowercase letters, or capitalize the first letter of each word:

p.uppercase {
  text-transform: uppercase;
}

p.lowercase {
  text-transform: lowercase;
}

p.capitalize {
  text-transform: capitalize;
}

Text Indentation
The text-indent property is used to specify the indentation of the first line of a text:

p {
  text-indent: 50px;
}

Letter Spacing
The letter-spacing property is used to specify the space between the characters in a text.

The following example demonstrates how to increase or decrease the space between characters:

h1 {
  letter-spacing: 3px;
}

h2 {
  letter-spacing: -3px;
}

Line Height
The line-height property is used to specify the space between lines:

p.small {
  line-height: 0.8;
}

p.big {
  line-height: 1.8;
}

Text Direction
The direction property is used to change the text direction of an element:

p {
  direction: rtl;
}

Word Spacing
The word-spacing property is used to specify the space between the words in a text.

The following example demonstrates how to increase or decrease the space between words:

h1 {
  word-spacing: 10px;
}

h2 {
  word-spacing: -5px;
}

Text Shadow
The text-shadow property adds shadow to text.

The following example specifies the position of the horizontal shadow (3px), the position of the vertical shadow (2px) and the color of the shadow (red):

h1 {
  text-shadow: 3px 2px red;
}

Disable text wrapping inside an element
This example demonstrates how to disable text wrapping inside an element.

p {
  white-space: nowrap;
}

Vertical alignment of an image
This example demonstrates how to set the vertical align of an image in a text.

img.top {
  vertical-align: text-top;
}

img.bottom {
  vertical-align: text-bottom;
}

-------------------------------------------------------------------------------

CSS Fonts

The CSS font properties define the font family, boldness, size, and the style of a text.

Difference Between Serif and Sans-serif Fonts

CSS Font Families
In CSS, there are two types of font family names:

generic family - a group of font families with a similar look (like "Serif" or "Monospace")
font family - a specific font family (like "Times New Roman" or "Arial")

Generic family | Font family     | Description
----------------------------------------------
Serif          | Times New Roman |
               | Georgia         | Serif fonts have small lines at the ends on some characters
--------------------------------------------------------------------------------------------
Sans-serif     | Arial           |
               | Verdana         | "Sans" means without - these fonts do not have the lines at the ends of characters
-------------------------------------------------------------------------------------------
Monospace      | Courier New     |
               | Lucida Console  | All monospace characters have the same width

Note: On computer screens, sans-serif fonts are considered easier to read than serif fonts.

Font Family
The font family of a text is set with the font-family property.

The font-family property should hold several font names as a "fallback" system. If the browser does not support the first font, it tries the next font, and so on.

Start with the font you want, and end with a generic family, to let the browser pick a similar font in the generic family, if no other fonts are available.

Note: If the name of a font family is more than one word, it must be in quotation marks, like: "Times New Roman".

More than one font family is specified in a comma-separated list:

p {
  font-family: "Times New Roman", Times, serif;
}

https://www.w3schools.com/cssref/css_websafe_fonts.asp
https://www.w3schools.com/howto/howto_google_fonts.asp

The font-style property is mostly used to specify italic text.

This property has three values:

normal - The text is shown normally
italic - The text is shown in italics
oblique - The text is "leaning" (oblique is very similar to italic, but less supported)

p.normal {
  font-style: normal;
}

p.italic {
  font-style: italic;
}

p.oblique {
  font-style: oblique;
}

Font Size
The font-size property sets the size of the text.

Being able to manage the text size is important in web design. However, you should not use font size adjustments to make paragraphs look like headings, or headings look like paragraphs.

Always use the proper HTML tags, like <h1> - <h6> for headings and <p> for paragraphs.

The font-size value can be an absolute, or relative size.

Absolute size:

Sets the text to a specified size
Does not allow a user to change the text size in all browsers (bad for accessibility reasons)
Absolute size is useful when the physical size of the output is known
Relative size:

Sets the size relative to surrounding elements
Allows a user to change the text size in browsers

Note: If you do not specify a font size, the default size for normal text, like paragraphs, is 16px (16px=1em).

Set Font Size With Pixels
Setting the text size with pixels gives you full control over the text size:

h1 {
  font-size: 40px;
}

h2 {
  font-size: 30px;
}

p {
  font-size: 14px;
}

Tip: If you use pixels, you can still use the zoom tool to resize the entire page.

Set Font Size With Em
To allow users to resize the text (in the browser menu), many developers use em instead of pixels.

The em size unit is recommended by the W3C.

1em is equal to the current font size. The default text size in browsers is 16px. So, the default size of 1em is 16px.

The size can be calculated from pixels to em using this formula: pixels/16=em

h1 {
  font-size: 2.5em; /* 40px/16=2.5em */
}

h2 {
  font-size: 1.875em; /* 30px/16=1.875em */
}

p {
  font-size: 0.875em; /* 14px/16=0.875em */
}

In the example above, the text size in em is the same as the previous example in pixels. However, with the em size, it is possible to adjust the text size in all browsers.

Use a Combination of Percent and Em
The solution that works in all browsers, is to set a default font-size in percent for the <body> element:

body {
  font-size: 100%;
}

h1 {
  font-size: 2.5em;
}

h2 {
  font-size: 1.875em;
}

p {
  font-size: 0.875em;
}

Our code now works great! It shows the same text size in all browsers, and allows all browsers to zoom or resize the text!

Font Weight
The font-weight property specifies the weight of a font:

p.normal {
  font-weight: normal;
}

p.thick {
  font-weight: bold;
}

Responsive Font Size
The text size can be set with a vw unit, which means the "viewport width".

That way the text size will follow the size of the browser window:

<h1 style="font-size:10vw">Hello World</h1>

<!DOCTYPE html>
<html>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<body>

<h1 style="font-size:10vw;">Responsive Text</h1>

<p style="font-size:5vw;">Resize the browser window to see how the text size scales.</p>

<p style="font-size:5vw;">Use the "vw" unit when sizing the text. 10vw will set the size to 10% of the viewport width.</p>

<p>Viewport is the browser window size. 1vw = 1% of viewport width. If the viewport is 50cm wide, 1vw is 0.5cm.</p>

</body>
</html>

Viewport is the browser window size. 1vw = 1% of viewport width. If the viewport is 50cm wide, 1vw is 0.5cm.

Font Variant
The font-variant property specifies whether or not a text should be displayed in a small-caps font.

In a small-caps font, all lowercase letters are converted to uppercase letters. However, the converted uppercase letters appears in a smaller font size than the original uppercase letters in the text.

p.normal {
  font-variant: normal;
}

p.small {
  font-variant: small-caps;
}

All the font properties in one declaration
This example demonstrates how to use the shorthand property for setting all of the font properties in one declaration.

p.ex1 {
  font: 15px arial, sans-serif;
}

p.ex2 {
  font:italic bold 12px/30px Georgia, serif;
}